package main

import (
	"fmt"
	"math"
	"sort"
)

func main() {
	type TestCase struct {
		graph    [][]int
		initial  []int
		expected int
	}
	testCases := []TestCase{
		{
			graph:    [][]int{{1, 1, 0}, {1, 1, 0}, {0, 0, 1}},
			initial:  []int{0, 1},
			expected: 0,
		},
		{
			graph:    [][]int{{1, 1, 0}, {1, 1, 1}, {0, 1, 1}},
			initial:  []int{0, 1},
			expected: 1,
		},
		{
			graph:    [][]int{{1, 1, 0, 0}, {1, 1, 1, 0}, {0, 1, 1, 1}, {0, 0, 1, 1}},
			initial:  []int{0, 1},
			expected: 1,
		},
	}

	for i, tc := range testCases {
		result := minMalwareSpread(tc.graph, tc.initial)
		if result == tc.expected {
			fmt.Printf("Test case %d passed\n", i+1)
		} else {
			fmt.Printf("Test case %d failed: expected %d, got %d\n", i+1, tc.expected, result)
			return
		}
	}
}

func minMalwareSpread(graph [][]int, initial []int) int {
	sort.Ints(initial)

	// to simulate the node is removed
	infected := make(map[int]struct{})
	for _, v := range initial {
		infected[v] = struct{}{}
	}

	maxCnt := math.MaxInt32
	res := 0

	// this traversal is to remove node
	for _, v := range initial {
		// remove node
		delete(infected, v)

		visited := make(map[int]struct{})
		visited[v] = struct{}{}

		cnt := 0
		// traversal infected set
		// use dfs to find total infected nodes
		for cur := range infected {
			if cur != v {
				dfs(graph, cur, &visited, &cnt)
			}
		}

		// if we remove "v" , and discover the fewest infected nodes
		// means we remove a node , the minimal nodes infected
		if cnt < maxCnt || (cnt == maxCnt && v < res) {
			maxCnt = cnt
			res = v
		}
		// add node
		infected[v] = struct{}{}
	}
	return res
}

// to caculate how many nodes will be infected
func dfs(graph [][]int, node int, visited *map[int]struct{}, cnt *int) {
	if _, ok := (*visited)[node]; ok {
		return
	}

	(*visited)[node] = struct{}{}
	*cnt++

	for i, v := range graph[node] {
		if v == 1 {
			dfs(graph, i, visited, cnt)
		}
	}
}
